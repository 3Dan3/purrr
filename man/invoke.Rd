% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/invoke.R
\name{invoke}
\alias{invoke}
\alias{invoke_map}
\alias{map_call}
\title{Invoke functions.}
\usage{
invoke(.f, .x = NULL, ...)

invoke_map(.f, .x = list(NULL), ...)
}
\arguments{
\item{.f}{For \code{invoke}, a function; for \code{invoke_map} a
list of functions.}

\item{.x}{For \code{invoke}, an argument-list; for \code{invoke_map} a
list of argument-lists the same length as \code{.f} (or length 1).}

\item{...}{Additional arguments passed to each function.}
}
\description{
This pair of functions make it easier to combine a function and list
of parameters to get a result. \code{invoke} is a wrapper around
\code{do.call} that makes it easy to use in a pipe. \code{invoke_map}
makes it easier to call lists of functions with lists of parameters.
}
\examples{
# Invoke a function with a list of arguments
invoke(runif, list(n = 10))
# Invoke a function with named arguments
invoke(runif, n = 10)

# Combine the two:
invoke(paste, list("01a", "01b"), sep = "-")
# That's more natural as part of a pipeline:
list("01a", "01b") \%>\%
  invoke(paste, ., sep = ".")

# Invoke a list of functions, each with different arguments
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
# Or with the same inputs:
invoke_map(list(runif, rnorm), list(list(n = 5)))
invoke_map(list(runif, rnorm), n = 5)
# Or the same function with different inputs:
invoke_map("runif", list(list(n = 5), list(n = 10)))

# Or as a pipeline
list(m1 = mean, m2 = median) \%>\%
  invoke_map(x = rcauchy(100))

# If you have pairs of function name and arguments, it's natural
# to store them in a data frame:
if (requireNamespace("dplyr", quietly = TRUE)) {
df <- dplyr::data_frame(
  f = c("runif", "rpois", "rnorm"),
  params = list(
    list(n = 10),
    list(n = 5, lambda = 10),
    list(n = 10, mean = -3, sd = 10)
  )
)
df
invoke_map(df$f, df$params)
}
}

