% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reduce.R
\name{reduce}
\alias{reduce}
\alias{reduce_right}
\title{Reduce a list to a single value by iteratively applying a binary function.}
\usage{
reduce(.x, .f, ..., .init)

reduce_right(.x, .f, ..., .init)
}
\arguments{
\item{.x}{A list or atomic vector.}

\item{.f}{A two-argument function. The function will be passed the
accumulated value as the first argument and the "next" value as the
second argument.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.init}{If supplied, will be used as the first value to start
the accumulation, rather than using \code{x[[1]]}. This is useful if
you want to ensure that \code{reduce} returns a correct value when \code{.x}
is empty. If missing, and \code{x} is empty, will throw an error.}
}
\description{
\code{reduce()} combines from the left, \code{reduce_right()} combines from
the right.
}
\examples{
1:3 \%>\% reduce(`+`)
1:10 \%>\% reduce(`*`)

samples <- rerun(2, sample(10, 5))
samples
reduce(samples, union)
reduce(samples, intersect)

x <- list(c(0, 1), c(2, 3), c(4, 5))
x \%>\% reduce(c)
x \%>\% reduce_right(c)
# Equivalent to:
x \%>\% rev() \%>\% reduce(c)
}
