% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/output.R
\name{safe}
\alias{maybe}
\alias{outputs}
\alias{safe}
\title{Capture side effects}
\usage{
safe(.f, otherwise = NULL, quiet = TRUE)

outputs(.f)

maybe(.f, otherwise, quiet = TRUE)
}
\arguments{
\item{.f}{A function, formula or string.

  If a function, it is used as is.

  If a formula, e.g. \code{~ .x + 2}, it is converted to a function with
  a three arguments, \code{.x} or \code{.}, \code{.y}, \code{.z}. This allows
  you to create very compact anonymous functions of up to 3 variables.

  If a string, e.g. \code{"y"}, it is converted to an extractor function,
  \code{function(x) x[["y"]]}. To index deeply into a nested list,
  pass a character vector, \code{c("x", "y")} is equivalent to
  \code{z[["x"]][["y"]]}.}

\item{otherwise}{Default value to use when an error occurs.}

\item{quiet}{Hide errors (\code{TRUE}, the default), or display them
as they occur?}
}
\value{
\code{safe}: a list with components \code{result} and \code{error}.
  One value is always \code{NULL}

\code{outputs}: a list with components \code{result}, \code{output},
  \code{messages} and \code{warnings}.
}
\description{
These functions wrap functions so instead generating side effects through
output, messages, warnings, and errors, they instead return enchanced
output.
}
\examples{
safe_log <- safe(log)
safe_log(10)
safe_log("a")

list("a", 10, 100) \%>\%
  map(safe_log) \%>\%
  zip_n()

# This is a bit easier to work with if you supply a default value
# of the same type and use the simplify argument to zip_n():
safe_log <- safe(log, otherwise = NA_real_)
list("a", 10, 100) \%>\%
  map(safe_log) \%>\%
  zip_n(.simplify = TRUE)

# To replace errors with a default value, use maybe().
list("a", 10, 100) \%>\%
  map_dbl(maybe(log, NA_real_))
}

