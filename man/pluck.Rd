% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_mapper.R
\name{pluck}
\alias{pluck}
\alias{attr_getter}
\title{Pluck out a single an element from a vector or environment}
\usage{
pluck(x, index, default = NULL)

attr_getter(attr)
}
\arguments{
\item{x}{A vector or environment}

\item{index}{A list indexing into the object}

\item{default}{Value to use if target is empty or absent.}

\item{attr}{An attribute name as string.}
}
\description{
This is a generalised form of \code{[[} which allows you to index by
name, position, or attribute.
}
\examples{
# pluck() supports integer positions, string names, and functions.
# Using functions, you can easily extend pluck(). Let's create a
# list of data structures:
obj1 <- list("a", list(1, elt = "foobar"))
obj2 <- list("b", list(2, elt = "foobaz"))
x <- list(obj1, obj2)

# And now an accessor for these complex data structures:
my_element <- function(x) x[[2]]$elt

# The accessor can then be passed to pluck:
pluck(x, list(1, my_element))
pluck(x, list(2, my_element))


# This technique is used for plucking into attributes with
# attr_getter(). It takes an attribute name and returns a function
# to access the attribute:
obj1 <- structure("obj", obj_attr = "foo")
obj2 <- structure("obj", obj_attr = "bar")
x <- list(obj1, obj2)

# pluck() is handy for extracting deeply into a data structure.
# Here we'll first extract by position, then by attribute:
pluck(x, list(1, attr_getter("obj_attr")))  # From first object
pluck(x, list(2, attr_getter("obj_attr")))  # From second object
}
\keyword{internal}
