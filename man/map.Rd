% Generated by roxygen2 (4.0.2.9000): do not edit by hand
\name{map}
\alias{each}
\alias{map}
\title{Apply a function to each element of a list.}
\usage{
map(.x, .f, ..., .type)

each(.x, .f, ...)
}
\arguments{
\item{.x}{A list or vector.}

\item{.f}{A function, formula or string.

  If a function, it is used as is.

  If a formula, e.g. \code{~ x + 2}, it is converted to a function with
  a single argument, \code{x}, e.g. \code{function(x) x + 2}. This is less
  typing for very simple anonymous functions.

  If a string, e.g. \code{"y"}, it is converted to an extractor function,
  \code{function(x) x[["y"]]}.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.type}{Specifies the type of result of \code{.f}, if known.
If supplied, the result of \code{map} will be a vector or matrix.
If omitted, the result of \code{map} will be a list.}
}
\value{
\code{map} the transformed input; \code{each} the input \code{.x}.
}
\description{
\code{map} returns the transformed input; \code{each} calls \code{.f} for
its side-effect and returns the original input.
}
\examples{
1:10 \%>\%
  map(rnorm, n = 10) \%>\%
  map(mean, .type = numeric(1))

# Or use an anonymous function
1:10 \%>\%
  map(function(x) rnorm(10, x))

# Or a formula
1:10 \%>\%
  map(~ rnorm(10, x))

# A more realistic example: split a data frame into pieces, fit a
# model to each piece, summarise and extract R^2
mtcars \%>\%
  split(.$cyl) \%>\%
  map(~ lm(mpg ~ wt, data = x)) \%>\%
  map(summary) \%>\%
  map("r.squared", .type = numeric(1))
}
\seealso{
\code{\link{map2}()} and \code{\link{map3}()} to map over multiple
  inputs simulatenously
}

